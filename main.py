

# Form implementation generated from reading ui file 'Parser.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog,QTextBrowser ,QTableWidget ,QTableWidgetItem ,QTextEdit ,QMessageBox
from PyQt5.QtGui import QIcon, QPixmap
from scanner import Scanner
from Parser import Parser
import pkg_resources.py2_warn
import os
import pygraphviz
import networkx as nx
import matplotlib.pyplot as plt



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:1 rgba(170, 170, 127, 255));")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 20, 771, 501))
        self.tabWidget.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:0, stop:1 rgba(170, 170, 127, 255));\n"
"\n"
"font: 63 8pt \"Segoe UI Semibold\";")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tab)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 20, 651, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Selected_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.Selected_btn.setObjectName("Selected_btn")
        self.horizontalLayout.addWidget(self.Selected_btn)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.Scanner_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.Scanner_btn.setObjectName("Scanner_btn")
        self.horizontalLayout.addWidget(self.Scanner_btn)
        self.Grammer_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.Grammer_btn.setObjectName("Grammer_btn")
        self.horizontalLayout.addWidget(self.Grammer_btn)
        self.ParseTree_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.ParseTree_btn.setObjectName("ParseTree_btn")
        self.horizontalLayout.addWidget(self.ParseTree_btn)
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(130, 100, 81, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(470, 100, 101, 16))
        self.label_2.setObjectName("label_2")
        self.textBrowser = QtWidgets.QTextEdit(self.tab)
        self.textBrowser.setGeometry(QtCore.QRect(20, 120, 321, 331))
        self.textBrowser.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));\n"
"color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.textBrowser.setObjectName("textBrowser")
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(380, 121, 341, 331))
        self.tableWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.img_label = QtWidgets.QLabel(self.tab_2)
        #self.pixmap = QPixmap("out.png")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        #self.tabWidget.resize(1300,1500)

        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        #self.draw_syntex_tree(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.msg = QMessageBox()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    program = " "
    def raise_error(self ,error_type,token):
        self.msg.setIcon(QMessageBox.Critical)
        self.msg.setText(error_type+' , '+token)
        self.msg.setWindowTitle("ValueError")
        self.msg.exec_()

    def pygraphviz_layout_with_rank(self, G, prog="dot", root=None, sameRank=[], args=""):

        if root is not None:
            args += "-Groot=%s" % root
        A = nx.nx_agraph.to_agraph(G)
        for sameNodeHeight in sameRank:
            if type(sameNodeHeight) == str:
                print("node \"%s\" has no peers in its rank group" %
                      sameNodeHeight)
            A.add_subgraph(sameNodeHeight, rank="same")
        A.layout(prog=prog, args=args)
        node_pos = {}
        for n in G:
            node = pygraphviz.Node(A, n)
            try:
                xx, yy = node.attr["pos"].split(',')
                node_pos[n] = (float(xx), float(yy))
            except:
                #print("no position for node", n)
                node_pos[n] = (0.0, 0.0)
        return node_pos

    G = nx.DiGraph()
    def draw(self, same_rank_nodes):

        graph = self.G
        # pos = nx.get_node_attributes(graph, 'pos')
        pos = self.pygraphviz_layout_with_rank(
            graph, prog='dot', sameRank=same_rank_nodes)
        # pos = nx.nx_pydot.graphviz_layout(graph, prog='dot')
        labels = dict((n, d['value']) for n, d in graph.nodes(data=True))
        f = plt.figure(figsize=(13, 8))
        for shape in ['s', 'o']:
            nx.draw_networkx_nodes(graph, pos, node_color='b', node_size=1500, node_shape=shape, label=labels,
                                   nodelist=[
                                       sNode[0] for sNode in
                                       filter(lambda x: x[1]["shape"] == shape, graph.nodes(data=True))])
        nx.draw_networkx_edges(graph, pos, arrows=False)
        nx.draw_networkx_labels(graph, pos, labels=labels, font_size=8)
        plt.savefig('out.png')


        #plt.show()



    def Selected_btn_clicked(self):
        if self.Selected_btn.isEnabled() == True:
            #print("checked")
            filename = QFileDialog.getOpenFileName()
            path = filename[0]

            if path:
                f = open(path, "r")
                with f:
                    text_con = f.read()
                self.textBrowser.setText(text_con)
                self.program = text_con.split("\n")
            else:
                self.msg.resize(150,200)
                self.msg.setIcon(QMessageBox.Critical)
                self.msg.setText('FileNotFoundError')
                self.msg.setWindowTitle("Error")
                self.msg.exec_()


    parse_code = Parser()
    def Scanner_btn_clicked(self):
        list = []
        if self.Scanner_btn.isEnabled() == True:

            scanned_code = Scanner(self.textBrowser.toPlainText())
            scanned_code.scan()
            list = scanned_code.code_list
            list2 = scanned_code.tokens_types
            #print(list)
            self.tableWidget.setRowCount(len(list))
            for x in range(len(list)):
                self.tableWidget.setItem(x, 0, QTableWidgetItem(list[x]))
                self.tableWidget.setItem(x, 1, QTableWidgetItem(list2[x]))

    def draw_syntex_tree(self):
        if self.Grammer_btn.isEnabled():
            #print("Grammer clicked")
            scanned_code = Scanner(self.textBrowser.toPlainText())
            scanned_code.scan()
            self.parse_code.set_tokens_list_and_code_list(
                scanned_code.tokens_list, scanned_code.code_list)
            self.parse_code.run()
            if self.parse_code.flag == False:

                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setInformativeText("the statements are accepted by TINY language")
                msg.setWindowTitle("Information")
                msg.exec_()

            # print('ParseTree_btn clicked')
            nodes_list = self.parse_code.nodes_table
            edges_list = self.parse_code.edges_table

            for node_number, node in nodes_list.items():
                self.G.add_node(
                    node_number, value=node[0] + '\n' + node[1], shape=node[2])
            self.G.add_edges_from(edges_list)
            self.parse_code.clear_tables()
            self.draw(self.parse_code.same_rank_nodes)
            pixmap = QPixmap("out.png")

            MainWindow.resize(pixmap.width(), pixmap.height())
            self.tabWidget.resize(pixmap.width(), pixmap.height())
            self.img_label.resize(pixmap.width(), pixmap.height())
            self.img_label.setPixmap(pixmap)
            self.G.clear()

    def clean(self):
        if self.ParseTree_btn.isEnabled():
            self.textBrowser.clear()
            self.img_label.clear()
            self.tableWidget.clear()
            MainWindow.resize(800, 600)
            self.tabWidget.resize(800, 600)
            self.img_label.resize(800, 600)




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Selected_btn.setText(_translate("MainWindow", "Select  File"))
        self.Scanner_btn.setText(_translate("MainWindow", "Scann"))
        self.Grammer_btn.setText(_translate("MainWindow", "Draw the Parse Tree"))
        self.ParseTree_btn.setText(_translate("MainWindow", "Clear"))
        self.label.setText(_translate("MainWindow", "Source File"))
        self.label_2.setText(_translate("MainWindow", "Scanner Output"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Token"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Type"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))
        self.Selected_btn.clicked.connect(self.Selected_btn_clicked)
        self.Scanner_btn.clicked.connect(self.Scanner_btn_clicked)
        self.Grammer_btn.clicked.connect(self.draw_syntex_tree)
        self.ParseTree_btn.clicked.connect(self.clean)
        #self.img_label.setPixmap(pixmap)

    def resource_path(relative_path):
        """ Get absolute path to resource, works for dev and for PyInstaller """
        try:
            # PyInstaller creates a temp folder and stores path in _MEIPASS
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")

        return os.path.join(base_path, relative_path)
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
